{"version":3,"sources":["components/CreateTaskBlock/CreateTaskBlock.module.css","components/Column/Column.module.css","components/Card/Card.module.css","App.module.css","components/Card/Card.jsx","components/CreateTaskBlock/CreateTaskBlock.jsx","components/Column/Column.jsx","state/reducer.js","state/actionTypes.js","state/actions.js","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Card","cardId","index","children","draggableId","provided","ref","innerRef","className","styles","draggableProps","dragHandleProps","inner","CreateTaskBlock","handleChange","handleCreateBtnClick","handleCancelBtnClick","newCard","onChange","buttons","onClick","addTextBtn","cancelBtn","renderCards","text","id","key","Column","droppableId","handleAddBtnClick","useState","isCreating","setIsCreating","setText","useEffect","useCallback","e","target","value","handleAddTaskBtnClick","title","snapshot","Fragment","droppable","droppableProps","map","placeholder","addTaskBtn","initialState","reducer","state","action","type","payload","column","tasksInColumn","destination","source","tasksForRemove","newTaskInList","splice","tasksForInsert","console","log","createAction","addTask","nanoid","moveTask","App","useReducer","dispatch","handleDragEnd","draggable","onDragEnd","Object","keys","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91410cb1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"newCard\":\"CreateTaskBlock_newCard__2Cr0k\",\"buttons\":\"CreateTaskBlock_buttons__1VNfx\",\"addTextBtn\":\"CreateTaskBlock_addTextBtn__2OGbS\",\"cancelBtn\":\"CreateTaskBlock_cancelBtn__3jtVx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Column\":\"Column_Column__1pSSp\",\"title\":\"Column_title__1TUwi\",\"droppable\":\"Column_droppable__18ONb\",\"addTaskBtn\":\"Column_addTaskBtn__3nUTs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__2P1oS\",\"inner\":\"Card_inner__2nZYj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__3-TZh\"};","import React from 'react';\r\nimport {Draggable} from 'react-beautiful-dnd';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Card.module.css';\r\n\r\nconst Card = ({cardId, index, children}) => (\r\n    <Draggable draggableId={cardId} index={index}>\r\n        {(provided) => (\r\n            <div ref={provided.innerRef}\r\n                 className={styles.Card} {...provided.draggableProps} {...provided.dragHandleProps}><div className={styles.inner}>{children}</div></div>\r\n        )}\r\n    </Draggable>\r\n);\r\n\r\nCard.propTypes = {\r\n    cardId: PropTypes.string,\r\n    index: PropTypes.number,\r\n    children: PropTypes.node\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './CreateTaskBlock.module.css';\r\n\r\nconst CreateTaskBlock = ({\r\n    handleChange,\r\n    handleCreateBtnClick,\r\n    handleCancelBtnClick\r\n}) => (\r\n    <div className={styles.newCard}>\r\n        <textarea onChange={handleChange} />\r\n        <div className={styles.buttons}>\r\n            <button\r\n                onClick={handleCreateBtnClick}\r\n                className={styles.addTextBtn}\r\n            >\r\n                Create!\r\n            </button>\r\n            <button onClick={handleCancelBtnClick} className={styles.cancelBtn}>×\r\n            </button>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nCreateTaskBlock.propTypes = {\r\n    handleChange: PropTypes.func.isRequired,\r\n    handleCreateBtnClick: PropTypes.func.isRequired,\r\n    handleCancelBtnClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CreateTaskBlock;\r\n","import React, {useState, useEffect, useCallback} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Droppable} from 'react-beautiful-dnd';\r\nimport Card from '../Card';\r\nimport CreateTaskBlock from '../CreateTaskBlock';\r\nimport styles from './Column.module.css';\r\n\r\nconst renderCards = ({text, id}, index) => (<Card cardId={id} key={id} index={index}>{text}</Card>);\r\n\r\nconst Column = ({droppableId, handleAddBtnClick, children}) => {\r\n    const [isCreating, setIsCreating] = useState(false);\r\n    const [text, setText] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (text && !isCreating) {\r\n            handleAddBtnClick(droppableId, text);\r\n            setText('');\r\n        }\r\n    }, [isCreating, text, handleAddBtnClick, droppableId]);\r\n\r\n    const handleCreateBtnClick = useCallback(() => setIsCreating(false), [setIsCreating]);\r\n    const handleChange = useCallback(e => setText(e.target.value), [setText]);\r\n    const handleCancelBtnClick = useCallback(() => {\r\n        setText('');\r\n        setIsCreating(false);\r\n    }, [setText, setIsCreating]);\r\n    const handleAddTaskBtnClick = useCallback(() => setIsCreating(true), [setIsCreating]);\r\n\r\n    return (\r\n        <section className={styles.Column}>\r\n            <h2 className={styles.title}>{droppableId}</h2>\r\n            <Droppable\r\n                droppableId={droppableId}\r\n            >\r\n                {(provided, snapshot) => (\r\n                    <React.Fragment>\r\n                        <div\r\n                            className={styles.droppable}\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}>\r\n                            {children.map(renderCards)}\r\n                            {provided.placeholder}\r\n                            {isCreating && (\r\n                                <CreateTaskBlock\r\n                                    handleCancelBtnClick={handleCancelBtnClick}\r\n                                    handleChange={handleChange}\r\n                                    handleCreateBtnClick={handleCreateBtnClick}\r\n                                />)}\r\n\r\n                        </div>\r\n                        <button className={styles.addTaskBtn} onClick={handleAddTaskBtnClick}>+ Добавить задачу\r\n                        </button>\r\n                    </React.Fragment>\r\n                )}\r\n            </Droppable>\r\n        </section>\r\n    );\r\n}\r\n\r\nColumn.propTypes = {\r\n    droppableId: PropTypes.string,\r\n    handleAddBtnClick: PropTypes.func,\r\n    children: PropTypes.arrayOf(PropTypes.shape({\r\n        text: PropTypes.string,\r\n        id: PropTypes.string,\r\n    }))\r\n};\r\n\r\nexport default Column;","import * as actionTypes from './actionTypes';\r\n\r\nexport const initialState = {\r\n    'ToDo': [],\r\n    'In Progress': [],\r\n    'Done': []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.ADD_TASK:\r\n            const { column, text, id } = action.payload;\r\n            const tasksInColumn = [...state[column], {text, id}];\r\n\r\n            return {\r\n                ...state,\r\n                [column]: tasksInColumn\r\n            };\r\n        case actionTypes.MOVE_TASK:\r\n            const {destination, source} = action.payload;\r\n            if(!destination || !source) {\r\n                return state;\r\n            }\r\n            const tasksForRemove = [...state[source.droppableId]];\r\n            const newTaskInList = tasksForRemove.splice(source.index, 1);\r\n            const tasksForInsert = [...state[destination.droppableId]];\r\n            if(destination.droppableId === source.droppableId) {\r\n                tasksForRemove.splice(destination.index, 0, ...newTaskInList);\r\n                console.log(tasksForRemove);\r\n                return {\r\n                    ...state,\r\n                    [destination.droppableId]: tasksForRemove\r\n                }\r\n            }\r\n            tasksForInsert.splice(destination.index, 0, ...newTaskInList);\r\n            return {\r\n                ...state,\r\n                [source.droppableId]: tasksForRemove,\r\n                [destination.droppableId]: tasksForInsert\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;","export const ADD_TASK = 'ADD_TASK';\r\nexport const MOVE_TASK = 'MOVE_TASK';","import * as actionTypes from './actionTypes';\r\nimport nanoid from 'nanoid';\r\n\r\nconst createAction = (type, payload) => ({type, payload});\r\n\r\nexport const addTask = (column, text) => createAction(actionTypes.ADD_TASK,  { column, text, id: nanoid() });\r\nexport const moveTask = ({destination, source}) => createAction(actionTypes.MOVE_TASK, {destination, source});","import React, {useReducer, useCallback} from 'react';\r\nimport {DragDropContext} from 'react-beautiful-dnd';\r\nimport Column from './components/Column';\r\nimport styles from './App.module.css';\r\nimport reducer, {initialState} from './state/reducer';\r\nimport {addTask, moveTask} from \"./state/actions\";\r\n\r\nfunction App() {\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n\r\n    const handleAddBtnClick = useCallback((droppableId, text) => dispatch(addTask(droppableId, text)), [dispatch]);\r\n    const handleDragEnd = useCallback((draggable) => dispatch(moveTask(draggable)), [dispatch])\r\n\r\n    return (\r\n        <DragDropContext\r\n            onDragEnd={handleDragEnd}\r\n        >\r\n            <div className={styles.App}>\r\n                    {Object.keys(state).map(droppableId => (\r\n                        <Column\r\n                            key={droppableId}\r\n                            droppableId={droppableId}\r\n                            handleAddBtnClick={handleAddBtnClick}>\r\n                            {state[droppableId]}\r\n                        </Column>\r\n                    ))}\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}